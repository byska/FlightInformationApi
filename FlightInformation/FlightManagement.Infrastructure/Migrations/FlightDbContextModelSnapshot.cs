// <auto-generated />
using System;
using FlightManagement.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FlightManagement.Infrastructure.Migrations
{
    [DbContext(typeof(FlightDbContext))]
    partial class FlightDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Airport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("Entities.ConnectingFlight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid>("SharedFlightId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SharedFlightId")
                        .IsUnique();

                    b.ToTable("ConnectingFlights");
                });

            modelBuilder.Entity("Entities.Flight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("FlightDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FlightRouteId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehicleTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FlightRouteId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("Entities.FlightRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DestinationAirportId")
                        .HasColumnType("uuid");

                    b.Property<int>("RouteType")
                        .HasColumnType("integer");

                    b.Property<Guid>("SourceAirportId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DestinationAirportId");

                    b.HasIndex("SourceAirportId");

                    b.ToTable("FlightRoutes");
                });

            modelBuilder.Entity("Entities.SharedFlight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FlightId")
                        .HasColumnType("uuid");

                    b.Property<string>("PartnerCompany")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FlightId")
                        .IsUnique();

                    b.ToTable("SharedFlights");
                });

            modelBuilder.Entity("Entities.VehicleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AircraftType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("MaxCrew")
                        .HasColumnType("integer");

                    b.Property<int>("MaxPassengers")
                        .HasColumnType("integer");

                    b.Property<int>("SeatCount")
                        .HasColumnType("integer");

                    b.Property<int>("SeatPlan")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<int>("StandardMenu")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("Entities.Airport", b =>
                {
                    b.OwnsOne("FlightManagement.Domain.ValueObjects.AirportCode", "Code", b1 =>
                        {
                            b1.Property<Guid>("AirportId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("Code");

                            b1.HasKey("AirportId");

                            b1.ToTable("Airports");

                            b1.WithOwner()
                                .HasForeignKey("AirportId");
                        });

                    b.Navigation("Code")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.ConnectingFlight", b =>
                {
                    b.HasOne("Entities.SharedFlight", "SharedFlight")
                        .WithOne("ConnectingFlight")
                        .HasForeignKey("Entities.ConnectingFlight", "SharedFlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SharedFlight");
                });

            modelBuilder.Entity("Entities.Flight", b =>
                {
                    b.HasOne("Entities.FlightRoute", "FlightRoute")
                        .WithMany()
                        .HasForeignKey("FlightRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FlightManagement.Domain.ValueObjects.FlightNumber", "FlightNumber", b1 =>
                        {
                            b1.Property<Guid>("FlightId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("FlightNumber");

                            b1.HasKey("FlightId");

                            b1.ToTable("Flights");

                            b1.WithOwner()
                                .HasForeignKey("FlightId");
                        });

                    b.OwnsOne("FlightManagement.Domain.ValueObjects.FlightDuration", "Duration", b1 =>
                        {
                            b1.Property<Guid>("FlightId")
                                .HasColumnType("uuid");

                            b1.Property<TimeSpan>("Value")
                                .HasColumnType("interval")
                                .HasColumnName("Duration");

                            b1.HasKey("FlightId");

                            b1.ToTable("Flights");

                            b1.WithOwner()
                                .HasForeignKey("FlightId");
                        });

                    b.Navigation("Duration")
                        .IsRequired();

                    b.Navigation("FlightNumber")
                        .IsRequired();

                    b.Navigation("FlightRoute");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Entities.FlightRoute", b =>
                {
                    b.HasOne("Entities.Airport", "DestinationAirport")
                        .WithMany()
                        .HasForeignKey("DestinationAirportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Airport", "SourceAirport")
                        .WithMany()
                        .HasForeignKey("SourceAirportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationAirport");

                    b.Navigation("SourceAirport");
                });

            modelBuilder.Entity("Entities.SharedFlight", b =>
                {
                    b.HasOne("Entities.Flight", "Flight")
                        .WithOne("SharedFlight")
                        .HasForeignKey("Entities.SharedFlight", "FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FlightManagement.Domain.ValueObjects.FlightNumber", "PartnerFlightNumber", b1 =>
                        {
                            b1.Property<Guid>("SharedFlightId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("PartnerFlightNumber");

                            b1.HasKey("SharedFlightId");

                            b1.ToTable("SharedFlights");

                            b1.WithOwner()
                                .HasForeignKey("SharedFlightId");
                        });

                    b.Navigation("Flight");

                    b.Navigation("PartnerFlightNumber")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Flight", b =>
                {
                    b.Navigation("SharedFlight");
                });

            modelBuilder.Entity("Entities.SharedFlight", b =>
                {
                    b.Navigation("ConnectingFlight");
                });
#pragma warning restore 612, 618
        }
    }
}
